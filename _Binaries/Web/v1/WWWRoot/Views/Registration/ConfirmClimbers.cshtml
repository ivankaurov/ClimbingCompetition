@model IEnumerable<ClimberApplication>
@{
    
    RegionModel reg = ViewBag.DefaultRegion;

    ViewBag.Title = String.Format("Проверьте заявку");
    
    long? regionId = (reg == null) ? null : new long?(reg.Iid);
    CompetitionModel comp = ViewBag.Comp;
    int styleCount = 0;
    if (comp.Lead)
    {
        styleCount++;
    }
    if (comp.Speed)
    {
        styleCount++;
    }
    if (comp.Boulder)
    {
        styleCount++;
    }
    ClimberApplication[] data = (Model == null) ? new ClimberApplication[0] : Model.ToArray();
}
@section scripts {
    <script src="~/Scripts/ControllerScriptis/Registration/ConfirmClimbers.js" type="text/javascript"></script>
}
<h2>@ViewBag.Title</h2>
@Html.ValidationSummary(false)
@using (Html.BeginForm("ConfirmClimbers", "Registration", new { compId = comp.Iid, regionId = regionId }, FormMethod.Post))
{
    <table>
        <thead>
            <tr>
                <td rowspan="2"></td>
                <td rowspan="2">@Html.DisplayNameFor(m => m.DisplayName)</td>
                <td rowspan="2">@Html.DisplayNameFor(m => m.GenderP)</td>
                <td rowspan="2">@Html.DisplayNameFor(m => m.YearOfBirth)</td>
                <td rowspan="2">@Html.DisplayNameFor(m => m.GroupName)</td>
                <td rowspan="2">@Html.DisplayNameFor(m => m.Team)</td>
                <td rowspan="2">@Html.DisplayNameFor(m => m.Qf)</td>
                <td colspan="@styleCount">Участие в видах</td>
                <td rowspan="2">@Html.DisplayNameFor(m => m.Confirmed)</td>
            </tr>
            <tr>
                @if (comp.Lead)
                {
                    <td>@Html.DisplayNameFor(m => m.Lead)</td>
                }
                @if (comp.Speed)
                {
                    <td>@Html.DisplayNameFor(m => m.Speed)</td>
                }
                @if (comp.Boulder)
                {
                    <td>@Html.DisplayNameFor(m => m.Boulder)</td>
                }
            </tr>
        </thead>
        <tbody>
           @* @for (int i = 0; i < data.Length; i++) *@
           @{
               String strH;
           }
           @for(int indx = 0; indx < data.Length; indx++)
           {
               
               strH = String.Format("data[{0}].", indx);
                <tr>
                    <td>
                        @(indx + 1)
                        @Html.Hidden("data.Index", indx)
                    </td>
                    <td>
                        @Html.DisplayFor(m => data[indx].DisplayName)
                        @Html.Hidden(strH + "Surname", data[indx].Surname)
                        @Html.Hidden(strH + "Name", data[indx].Name)
                    </td>
                    <td>
                        @data[indx].GenderP.GetFriendlyValue()
                        @Html.Hidden(strH + "GenderP", data[indx].GenderP)
                    </td>
                    <td>
                        @Html.DisplayFor(m => data[indx].YearOfBirth)
                        @Html.Hidden(strH + "YearOfBirth", data[indx].YearOfBirth)
                    </td>
                    <td>
                        @Html.DisplayFor(m => data[indx].GroupName)
                        @Html.Hidden(strH + "GroupId", data[indx].GroupId)
                        @Html.Hidden(strH + "GroupName", data[indx].GroupName)
                    </td>
                    <td>
                        @Html.DisplayFor(m => data[indx].Team.Name)
                        @Html.Hidden(strH + "TeamId", data[indx].TeamId)
                    </td>
                    <td>
                        @data[indx].Qf.GetFriendlyValue()
                        @Html.Hidden(strH + "Qf", data[indx].Qf)
                    </td>
                    @if (comp.Lead)
                    {
                        <td>
                            @data[indx].Lead.GetFriendlyValue()
                            @Html.Hidden(strH + "Lead", data[indx].Lead)
                        </td>
                    }
                    @if (comp.Speed)
                    {
                        <td>
                            @data[indx].Speed.GetFriendlyValue()
                            @Html.Hidden(strH + "Speed", data[indx].Speed)
                        </td>
                    }
                    @if (comp.Boulder)
                    {
                        <td>
                            @data[indx].Boulder.GetFriendlyValue()
                            @Html.Hidden(strH + "Boulder", data[indx].Boulder)
                        </td>
                    }
                    <td>
                        @Html.CheckBox(strH + "Confirmed", data[indx].Confirmed, new { @class = Constants.HIDE_WHEN_EDIT })
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @Html.Hidden("goback", false, new { @id = "goback" })
    <input type="submit" value="Подтвердить" onclick="btnSubmit_Click()" class="@Constants.HIDE_WHEN_EDIT" />
    <br />
    <input type="submit" value="Назад" onclick="btnBack_Click()" class="@Constants.HIDE_WHEN_EDIT" />
}