// <copyright file="Reference.cs">
// Copyright © 2016 All Rights Reserved
// This file is part of ClimbingCompetition.
//
//  ClimbingCompetition is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  ClimbingCompetition is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with ClimbingCompetition.  If not, see <http://www.gnu.org/licenses/>.
//
// (Этот файл — часть ClimbingCompetition.
// 
// ClimbingCompetition - свободная программа: вы можете перераспространять ее и/или
// изменять ее на условиях Стандартной общественной лицензии GNU в том виде,
// в каком она была опубликована Фондом свободного программного обеспечения;
// либо версии 3 лицензии, либо (по вашему выбору) любой более поздней
// версии.
// 
// ClimbingCompetition распространяется в надежде, что она будет полезной,
// но БЕЗО ВСЯКИХ ГАРАНТИЙ; даже без неявной гарантии ТОВАРНОГО ВИДА
// или ПРИГОДНОСТИ ДЛЯ ОПРЕДЕЛЕННЫХ ЦЕЛЕЙ. Подробнее см. в Стандартной
// общественной лицензии GNU.
// 
// Вы должны были получить копию Стандартной общественной лицензии GNU
// вместе с этой программой. Если это не так, см. <http://www.gnu.org/licenses/>.)
// </copyright>
// <author>Ivan Kaurov</author>
// <date>30.08.2016 23:51</date>

﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ClimbingCompetition.WebServices {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ClimbingWebServiceSoap", Namespace="http://climbing-competition.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ClimbersResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelatedEnd))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StructuralObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ONLCompetitionSerializable[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityKeyMember[]))]
    public partial class ClimbingWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ValidateAdminPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParamValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllBinaryParamsStringParamValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBinaryParamValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllCompetitionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamsForCompetitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupsForCompetitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClimberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClimbersForCompetitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostListOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostListsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteListsWhereSecretaryIDInOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteListsNotInSecretaryIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostLeadResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostSpeedResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostBoulderResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostBoulderResultListOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostSpeedResultListOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostLeadResultListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLeadResultsForClimberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpeedResultsForClimberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBoulderResultsForClimberOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCompetitionParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostCompetitionParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostCompetitionBinaryParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostPhotoForClimberOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostTeamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostClimberOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteClimbersNotInIidOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteClimbersBySecretaryIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteGroupsNotInIidOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTeamsNotInSecretaryIdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ClimbingWebService() {
            this.Url = global::ClimbingCompetition.Properties.Settings.Default.UserForms_WebServices_ClimbingWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ValidateAdminPasswordCompletedEventHandler ValidateAdminPasswordCompleted;
        
        /// <remarks/>
        public event GetParamValueCompletedEventHandler GetParamValueCompleted;
        
        /// <remarks/>
        public event GetAllBinaryParamsStringParamValuesCompletedEventHandler GetAllBinaryParamsStringParamValuesCompleted;
        
        /// <remarks/>
        public event GetBinaryParamValueCompletedEventHandler GetBinaryParamValueCompleted;
        
        /// <remarks/>
        public event GetAllCompetitionsCompletedEventHandler GetAllCompetitionsCompleted;
        
        /// <remarks/>
        public event GetTeamsForCompetitionCompletedEventHandler GetTeamsForCompetitionCompleted;
        
        /// <remarks/>
        public event GetGroupsForCompetitionCompletedEventHandler GetGroupsForCompetitionCompleted;
        
        /// <remarks/>
        public event GetClimberCompletedEventHandler GetClimberCompleted;
        
        /// <remarks/>
        public event GetClimbersForCompetitionCompletedEventHandler GetClimbersForCompetitionCompleted;
        
        /// <remarks/>
        public event GetListCompletedEventHandler GetListCompleted;
        
        /// <remarks/>
        public event GetListsCompletedEventHandler GetListsCompleted;
        
        /// <remarks/>
        public event PostListCompletedEventHandler PostListCompleted;
        
        /// <remarks/>
        public event PostListsCompletedEventHandler PostListsCompleted;
        
        /// <remarks/>
        public event DeleteListsWhereSecretaryIDInCompletedEventHandler DeleteListsWhereSecretaryIDInCompleted;
        
        /// <remarks/>
        public event DeleteListsNotInSecretaryIDCompletedEventHandler DeleteListsNotInSecretaryIDCompleted;
        
        /// <remarks/>
        public event PostLeadResultCompletedEventHandler PostLeadResultCompleted;
        
        /// <remarks/>
        public event PostSpeedResultCompletedEventHandler PostSpeedResultCompleted;
        
        /// <remarks/>
        public event PostBoulderResultCompletedEventHandler PostBoulderResultCompleted;
        
        /// <remarks/>
        public event PostBoulderResultListCompletedEventHandler PostBoulderResultListCompleted;
        
        /// <remarks/>
        public event PostSpeedResultListCompletedEventHandler PostSpeedResultListCompleted;
        
        /// <remarks/>
        public event PostLeadResultListCompletedEventHandler PostLeadResultListCompleted;
        
        /// <remarks/>
        public event GetLeadResultsForClimberCompletedEventHandler GetLeadResultsForClimberCompleted;
        
        /// <remarks/>
        public event GetSpeedResultsForClimberCompletedEventHandler GetSpeedResultsForClimberCompleted;
        
        /// <remarks/>
        public event GetBoulderResultsForClimberCompletedEventHandler GetBoulderResultsForClimberCompleted;
        
        /// <remarks/>
        public event RemoveCompetitionParamCompletedEventHandler RemoveCompetitionParamCompleted;
        
        /// <remarks/>
        public event PostCompetitionParamCompletedEventHandler PostCompetitionParamCompleted;
        
        /// <remarks/>
        public event PostCompetitionBinaryParamCompletedEventHandler PostCompetitionBinaryParamCompleted;
        
        /// <remarks/>
        public event PostPhotoForClimberCompletedEventHandler PostPhotoForClimberCompleted;
        
        /// <remarks/>
        public event PostTeamsCompletedEventHandler PostTeamsCompleted;
        
        /// <remarks/>
        public event PostTeamCompletedEventHandler PostTeamCompleted;
        
        /// <remarks/>
        public event PostGroupCompletedEventHandler PostGroupCompleted;
        
        /// <remarks/>
        public event PostClimberCompletedEventHandler PostClimberCompleted;
        
        /// <remarks/>
        public event DeleteClimbersNotInIidCompletedEventHandler DeleteClimbersNotInIidCompleted;
        
        /// <remarks/>
        public event DeleteClimbersBySecretaryIDCompletedEventHandler DeleteClimbersBySecretaryIDCompleted;
        
        /// <remarks/>
        public event DeleteGroupsNotInIidCompletedEventHandler DeleteGroupsNotInIidCompleted;
        
        /// <remarks/>
        public event DeleteTeamsNotInSecretaryIdCompletedEventHandler DeleteTeamsNotInSecretaryIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/ValidateAdminPassword", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateAdminPassword([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] password, long compID) {
            object[] results = this.Invoke("ValidateAdminPassword", new object[] {
                        password,
                        compID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateAdminPasswordAsync(byte[] password, long compID) {
            this.ValidateAdminPasswordAsync(password, compID, null);
        }
        
        /// <remarks/>
        public void ValidateAdminPasswordAsync(byte[] password, long compID, object userState) {
            if ((this.ValidateAdminPasswordOperationCompleted == null)) {
                this.ValidateAdminPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateAdminPasswordOperationCompleted);
            }
            this.InvokeAsync("ValidateAdminPassword", new object[] {
                        password,
                        compID}, this.ValidateAdminPasswordOperationCompleted, userState);
        }
        
        private void OnValidateAdminPasswordOperationCompleted(object arg) {
            if ((this.ValidateAdminPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateAdminPasswordCompleted(this, new ValidateAdminPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetParamValue", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetParamValue(string paramName, long compID) {
            object[] results = this.Invoke("GetParamValue", new object[] {
                        paramName,
                        compID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetParamValueAsync(string paramName, long compID) {
            this.GetParamValueAsync(paramName, compID, null);
        }
        
        /// <remarks/>
        public void GetParamValueAsync(string paramName, long compID, object userState) {
            if ((this.GetParamValueOperationCompleted == null)) {
                this.GetParamValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParamValueOperationCompleted);
            }
            this.InvokeAsync("GetParamValue", new object[] {
                        paramName,
                        compID}, this.GetParamValueOperationCompleted, userState);
        }
        
        private void OnGetParamValueOperationCompleted(object arg) {
            if ((this.GetParamValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParamValueCompleted(this, new GetParamValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetAllBinaryParamsStringParamValues", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PairingValueOfStringString[] GetAllBinaryParamsStringParamValues(long compID) {
            object[] results = this.Invoke("GetAllBinaryParamsStringParamValues", new object[] {
                        compID});
            return ((PairingValueOfStringString[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllBinaryParamsStringParamValuesAsync(long compID) {
            this.GetAllBinaryParamsStringParamValuesAsync(compID, null);
        }
        
        /// <remarks/>
        public void GetAllBinaryParamsStringParamValuesAsync(long compID, object userState) {
            if ((this.GetAllBinaryParamsStringParamValuesOperationCompleted == null)) {
                this.GetAllBinaryParamsStringParamValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllBinaryParamsStringParamValuesOperationCompleted);
            }
            this.InvokeAsync("GetAllBinaryParamsStringParamValues", new object[] {
                        compID}, this.GetAllBinaryParamsStringParamValuesOperationCompleted, userState);
        }
        
        private void OnGetAllBinaryParamsStringParamValuesOperationCompleted(object arg) {
            if ((this.GetAllBinaryParamsStringParamValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllBinaryParamsStringParamValuesCompleted(this, new GetAllBinaryParamsStringParamValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetBinaryParamValue", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetBinaryParamValue(string paramName, long compID) {
            object[] results = this.Invoke("GetBinaryParamValue", new object[] {
                        paramName,
                        compID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBinaryParamValueAsync(string paramName, long compID) {
            this.GetBinaryParamValueAsync(paramName, compID, null);
        }
        
        /// <remarks/>
        public void GetBinaryParamValueAsync(string paramName, long compID, object userState) {
            if ((this.GetBinaryParamValueOperationCompleted == null)) {
                this.GetBinaryParamValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBinaryParamValueOperationCompleted);
            }
            this.InvokeAsync("GetBinaryParamValue", new object[] {
                        paramName,
                        compID}, this.GetBinaryParamValueOperationCompleted, userState);
        }
        
        private void OnGetBinaryParamValueOperationCompleted(object arg) {
            if ((this.GetBinaryParamValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBinaryParamValueCompleted(this, new GetBinaryParamValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetAllCompetitions", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ONLCompetitionSerializable[] GetAllCompetitions() {
            object[] results = this.Invoke("GetAllCompetitions", new object[0]);
            return ((ONLCompetitionSerializable[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllCompetitionsAsync() {
            this.GetAllCompetitionsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllCompetitionsAsync(object userState) {
            if ((this.GetAllCompetitionsOperationCompleted == null)) {
                this.GetAllCompetitionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCompetitionsOperationCompleted);
            }
            this.InvokeAsync("GetAllCompetitions", new object[0], this.GetAllCompetitionsOperationCompleted, userState);
        }
        
        private void OnGetAllCompetitionsOperationCompleted(object arg) {
            if ((this.GetAllCompetitionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCompetitionsCompleted(this, new GetAllCompetitionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetTeamsForCompetition", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ONLTeamSerializable[] GetTeamsForCompetition(long compID) {
            object[] results = this.Invoke("GetTeamsForCompetition", new object[] {
                        compID});
            return ((ONLTeamSerializable[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamsForCompetitionAsync(long compID) {
            this.GetTeamsForCompetitionAsync(compID, null);
        }
        
        /// <remarks/>
        public void GetTeamsForCompetitionAsync(long compID, object userState) {
            if ((this.GetTeamsForCompetitionOperationCompleted == null)) {
                this.GetTeamsForCompetitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamsForCompetitionOperationCompleted);
            }
            this.InvokeAsync("GetTeamsForCompetition", new object[] {
                        compID}, this.GetTeamsForCompetitionOperationCompleted, userState);
        }
        
        private void OnGetTeamsForCompetitionOperationCompleted(object arg) {
            if ((this.GetTeamsForCompetitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamsForCompetitionCompleted(this, new GetTeamsForCompetitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetGroupsForCompetition", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ONLGroupSerializable[] GetGroupsForCompetition(long compID) {
            object[] results = this.Invoke("GetGroupsForCompetition", new object[] {
                        compID});
            return ((ONLGroupSerializable[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupsForCompetitionAsync(long compID) {
            this.GetGroupsForCompetitionAsync(compID, null);
        }
        
        /// <remarks/>
        public void GetGroupsForCompetitionAsync(long compID, object userState) {
            if ((this.GetGroupsForCompetitionOperationCompleted == null)) {
                this.GetGroupsForCompetitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupsForCompetitionOperationCompleted);
            }
            this.InvokeAsync("GetGroupsForCompetition", new object[] {
                        compID}, this.GetGroupsForCompetitionOperationCompleted, userState);
        }
        
        private void OnGetGroupsForCompetitionOperationCompleted(object arg) {
            if ((this.GetGroupsForCompetitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupsForCompetitionCompleted(this, new GetGroupsForCompetitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetClimber", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ONLClimberLinkSerializable GetClimber(int climberID, long compID, bool GetPhoto) {
            object[] results = this.Invoke("GetClimber", new object[] {
                        climberID,
                        compID,
                        GetPhoto});
            return ((ONLClimberLinkSerializable)(results[0]));
        }
        
        /// <remarks/>
        public void GetClimberAsync(int climberID, long compID, bool GetPhoto) {
            this.GetClimberAsync(climberID, compID, GetPhoto, null);
        }
        
        /// <remarks/>
        public void GetClimberAsync(int climberID, long compID, bool GetPhoto, object userState) {
            if ((this.GetClimberOperationCompleted == null)) {
                this.GetClimberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClimberOperationCompleted);
            }
            this.InvokeAsync("GetClimber", new object[] {
                        climberID,
                        compID,
                        GetPhoto}, this.GetClimberOperationCompleted, userState);
        }
        
        private void OnGetClimberOperationCompleted(object arg) {
            if ((this.GetClimberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClimberCompleted(this, new GetClimberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetClimbersForCompetition", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ONLClimberLinkSerializable[] GetClimbersForCompetition(long compID, bool GetConfirmedOnly, bool GetPhoto, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> groupID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> teamID) {
            object[] results = this.Invoke("GetClimbersForCompetition", new object[] {
                        compID,
                        GetConfirmedOnly,
                        GetPhoto,
                        groupID,
                        teamID});
            return ((ONLClimberLinkSerializable[])(results[0]));
        }
        
        /// <remarks/>
        public void GetClimbersForCompetitionAsync(long compID, bool GetConfirmedOnly, bool GetPhoto, System.Nullable<int> groupID, System.Nullable<int> teamID) {
            this.GetClimbersForCompetitionAsync(compID, GetConfirmedOnly, GetPhoto, groupID, teamID, null);
        }
        
        /// <remarks/>
        public void GetClimbersForCompetitionAsync(long compID, bool GetConfirmedOnly, bool GetPhoto, System.Nullable<int> groupID, System.Nullable<int> teamID, object userState) {
            if ((this.GetClimbersForCompetitionOperationCompleted == null)) {
                this.GetClimbersForCompetitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClimbersForCompetitionOperationCompleted);
            }
            this.InvokeAsync("GetClimbersForCompetition", new object[] {
                        compID,
                        GetConfirmedOnly,
                        GetPhoto,
                        groupID,
                        teamID}, this.GetClimbersForCompetitionOperationCompleted, userState);
        }
        
        private void OnGetClimbersForCompetitionOperationCompleted(object arg) {
            if ((this.GetClimbersForCompetitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClimbersForCompetitionCompleted(this, new GetClimbersForCompetitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetList", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ListHeader GetList(int secretary_id, long compID) {
            object[] results = this.Invoke("GetList", new object[] {
                        secretary_id,
                        compID});
            return ((ListHeader)(results[0]));
        }
        
        /// <remarks/>
        public void GetListAsync(int secretary_id, long compID) {
            this.GetListAsync(secretary_id, compID, null);
        }
        
        /// <remarks/>
        public void GetListAsync(int secretary_id, long compID, object userState) {
            if ((this.GetListOperationCompleted == null)) {
                this.GetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListOperationCompleted);
            }
            this.InvokeAsync("GetList", new object[] {
                        secretary_id,
                        compID}, this.GetListOperationCompleted, userState);
        }
        
        private void OnGetListOperationCompleted(object arg) {
            if ((this.GetListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListCompleted(this, new GetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetLists", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ListHeader[] GetLists(int[] secretary_ids, long compID) {
            object[] results = this.Invoke("GetLists", new object[] {
                        secretary_ids,
                        compID});
            return ((ListHeader[])(results[0]));
        }
        
        /// <remarks/>
        public void GetListsAsync(int[] secretary_ids, long compID) {
            this.GetListsAsync(secretary_ids, compID, null);
        }
        
        /// <remarks/>
        public void GetListsAsync(int[] secretary_ids, long compID, object userState) {
            if ((this.GetListsOperationCompleted == null)) {
                this.GetListsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListsOperationCompleted);
            }
            this.InvokeAsync("GetLists", new object[] {
                        secretary_ids,
                        compID}, this.GetListsOperationCompleted, userState);
        }
        
        private void OnGetListsOperationCompleted(object arg) {
            if ((this.GetListsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListsCompleted(this, new GetListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostList", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PostList(ListHeader list, long compID) {
            object[] results = this.Invoke("PostList", new object[] {
                        list,
                        compID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PostListAsync(ListHeader list, long compID) {
            this.PostListAsync(list, compID, null);
        }
        
        /// <remarks/>
        public void PostListAsync(ListHeader list, long compID, object userState) {
            if ((this.PostListOperationCompleted == null)) {
                this.PostListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostListOperationCompleted);
            }
            this.InvokeAsync("PostList", new object[] {
                        list,
                        compID}, this.PostListOperationCompleted, userState);
        }
        
        private void OnPostListOperationCompleted(object arg) {
            if ((this.PostListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostListCompleted(this, new PostListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostLists", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] PostLists(ListHeader[] lists, long compID) {
            object[] results = this.Invoke("PostLists", new object[] {
                        lists,
                        compID});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void PostListsAsync(ListHeader[] lists, long compID) {
            this.PostListsAsync(lists, compID, null);
        }
        
        /// <remarks/>
        public void PostListsAsync(ListHeader[] lists, long compID, object userState) {
            if ((this.PostListsOperationCompleted == null)) {
                this.PostListsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostListsOperationCompleted);
            }
            this.InvokeAsync("PostLists", new object[] {
                        lists,
                        compID}, this.PostListsOperationCompleted, userState);
        }
        
        private void OnPostListsOperationCompleted(object arg) {
            if ((this.PostListsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostListsCompleted(this, new PostListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/DeleteListsWhereSecretaryIDIn", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteListsWhereSecretaryIDIn(int[] idToDel, long compID) {
            object[] results = this.Invoke("DeleteListsWhereSecretaryIDIn", new object[] {
                        idToDel,
                        compID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteListsWhereSecretaryIDInAsync(int[] idToDel, long compID) {
            this.DeleteListsWhereSecretaryIDInAsync(idToDel, compID, null);
        }
        
        /// <remarks/>
        public void DeleteListsWhereSecretaryIDInAsync(int[] idToDel, long compID, object userState) {
            if ((this.DeleteListsWhereSecretaryIDInOperationCompleted == null)) {
                this.DeleteListsWhereSecretaryIDInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteListsWhereSecretaryIDInOperationCompleted);
            }
            this.InvokeAsync("DeleteListsWhereSecretaryIDIn", new object[] {
                        idToDel,
                        compID}, this.DeleteListsWhereSecretaryIDInOperationCompleted, userState);
        }
        
        private void OnDeleteListsWhereSecretaryIDInOperationCompleted(object arg) {
            if ((this.DeleteListsWhereSecretaryIDInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteListsWhereSecretaryIDInCompleted(this, new DeleteListsWhereSecretaryIDInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/DeleteListsNotInSecretaryID", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteListsNotInSecretaryID(int[] idNotToDelete, long compID) {
            object[] results = this.Invoke("DeleteListsNotInSecretaryID", new object[] {
                        idNotToDelete,
                        compID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteListsNotInSecretaryIDAsync(int[] idNotToDelete, long compID) {
            this.DeleteListsNotInSecretaryIDAsync(idNotToDelete, compID, null);
        }
        
        /// <remarks/>
        public void DeleteListsNotInSecretaryIDAsync(int[] idNotToDelete, long compID, object userState) {
            if ((this.DeleteListsNotInSecretaryIDOperationCompleted == null)) {
                this.DeleteListsNotInSecretaryIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteListsNotInSecretaryIDOperationCompleted);
            }
            this.InvokeAsync("DeleteListsNotInSecretaryID", new object[] {
                        idNotToDelete,
                        compID}, this.DeleteListsNotInSecretaryIDOperationCompleted, userState);
        }
        
        private void OnDeleteListsNotInSecretaryIDOperationCompleted(object arg) {
            if ((this.DeleteListsNotInSecretaryIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteListsNotInSecretaryIDCompleted(this, new DeleteListsNotInSecretaryIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostLeadResult", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long PostLeadResult(LeadResult res, long compID, out long listDataID) {
            object[] results = this.Invoke("PostLeadResult", new object[] {
                        res,
                        compID});
            listDataID = ((long)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void PostLeadResultAsync(LeadResult res, long compID) {
            this.PostLeadResultAsync(res, compID, null);
        }
        
        /// <remarks/>
        public void PostLeadResultAsync(LeadResult res, long compID, object userState) {
            if ((this.PostLeadResultOperationCompleted == null)) {
                this.PostLeadResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostLeadResultOperationCompleted);
            }
            this.InvokeAsync("PostLeadResult", new object[] {
                        res,
                        compID}, this.PostLeadResultOperationCompleted, userState);
        }
        
        private void OnPostLeadResultOperationCompleted(object arg) {
            if ((this.PostLeadResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostLeadResultCompleted(this, new PostLeadResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostSpeedResult", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long PostSpeedResult(SpeedResult res, long compID, out long listDataID) {
            object[] results = this.Invoke("PostSpeedResult", new object[] {
                        res,
                        compID});
            listDataID = ((long)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void PostSpeedResultAsync(SpeedResult res, long compID) {
            this.PostSpeedResultAsync(res, compID, null);
        }
        
        /// <remarks/>
        public void PostSpeedResultAsync(SpeedResult res, long compID, object userState) {
            if ((this.PostSpeedResultOperationCompleted == null)) {
                this.PostSpeedResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostSpeedResultOperationCompleted);
            }
            this.InvokeAsync("PostSpeedResult", new object[] {
                        res,
                        compID}, this.PostSpeedResultOperationCompleted, userState);
        }
        
        private void OnPostSpeedResultOperationCompleted(object arg) {
            if ((this.PostSpeedResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostSpeedResultCompleted(this, new PostSpeedResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostBoulderResult", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long PostBoulderResult(BoulderResult res, long compID, out long listDataID) {
            object[] results = this.Invoke("PostBoulderResult", new object[] {
                        res,
                        compID});
            listDataID = ((long)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void PostBoulderResultAsync(BoulderResult res, long compID) {
            this.PostBoulderResultAsync(res, compID, null);
        }
        
        /// <remarks/>
        public void PostBoulderResultAsync(BoulderResult res, long compID, object userState) {
            if ((this.PostBoulderResultOperationCompleted == null)) {
                this.PostBoulderResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostBoulderResultOperationCompleted);
            }
            this.InvokeAsync("PostBoulderResult", new object[] {
                        res,
                        compID}, this.PostBoulderResultOperationCompleted, userState);
        }
        
        private void OnPostBoulderResultOperationCompleted(object arg) {
            if ((this.PostBoulderResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostBoulderResultCompleted(this, new PostBoulderResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostBoulderResultList", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PostBoulderResultList(BoulderResult[] results, long compID, bool clearOtherRes, out int errCode) {
            object[] results1 = this.Invoke("PostBoulderResultList", new object[] {
                        results,
                        compID,
                        clearOtherRes});
            errCode = ((int)(results1[1]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public void PostBoulderResultListAsync(BoulderResult[] results, long compID, bool clearOtherRes) {
            this.PostBoulderResultListAsync(results, compID, clearOtherRes, null);
        }
        
        /// <remarks/>
        public void PostBoulderResultListAsync(BoulderResult[] results, long compID, bool clearOtherRes, object userState) {
            if ((this.PostBoulderResultListOperationCompleted == null)) {
                this.PostBoulderResultListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostBoulderResultListOperationCompleted);
            }
            this.InvokeAsync("PostBoulderResultList", new object[] {
                        results,
                        compID,
                        clearOtherRes}, this.PostBoulderResultListOperationCompleted, userState);
        }
        
        private void OnPostBoulderResultListOperationCompleted(object arg) {
            if ((this.PostBoulderResultListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostBoulderResultListCompleted(this, new PostBoulderResultListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostSpeedResultList", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PostSpeedResultList(SpeedResult[] results, long compID, bool clearOtherRes, out int errCode) {
            object[] results1 = this.Invoke("PostSpeedResultList", new object[] {
                        results,
                        compID,
                        clearOtherRes});
            errCode = ((int)(results1[1]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public void PostSpeedResultListAsync(SpeedResult[] results, long compID, bool clearOtherRes) {
            this.PostSpeedResultListAsync(results, compID, clearOtherRes, null);
        }
        
        /// <remarks/>
        public void PostSpeedResultListAsync(SpeedResult[] results, long compID, bool clearOtherRes, object userState) {
            if ((this.PostSpeedResultListOperationCompleted == null)) {
                this.PostSpeedResultListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostSpeedResultListOperationCompleted);
            }
            this.InvokeAsync("PostSpeedResultList", new object[] {
                        results,
                        compID,
                        clearOtherRes}, this.PostSpeedResultListOperationCompleted, userState);
        }
        
        private void OnPostSpeedResultListOperationCompleted(object arg) {
            if ((this.PostSpeedResultListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostSpeedResultListCompleted(this, new PostSpeedResultListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostLeadResultList", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PostLeadResultList(LeadResult[] results, long compID, bool clearOtherRes, out int errCode) {
            object[] results1 = this.Invoke("PostLeadResultList", new object[] {
                        results,
                        compID,
                        clearOtherRes});
            errCode = ((int)(results1[1]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public void PostLeadResultListAsync(LeadResult[] results, long compID, bool clearOtherRes) {
            this.PostLeadResultListAsync(results, compID, clearOtherRes, null);
        }
        
        /// <remarks/>
        public void PostLeadResultListAsync(LeadResult[] results, long compID, bool clearOtherRes, object userState) {
            if ((this.PostLeadResultListOperationCompleted == null)) {
                this.PostLeadResultListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostLeadResultListOperationCompleted);
            }
            this.InvokeAsync("PostLeadResultList", new object[] {
                        results,
                        compID,
                        clearOtherRes}, this.PostLeadResultListOperationCompleted, userState);
        }
        
        private void OnPostLeadResultListOperationCompleted(object arg) {
            if ((this.PostLeadResultListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostLeadResultListCompleted(this, new PostLeadResultListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetLeadResultsForClimber", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LeadResult[] GetLeadResultsForClimber(int listID_Secretary, int[] climbers, long compID) {
            object[] results = this.Invoke("GetLeadResultsForClimber", new object[] {
                        listID_Secretary,
                        climbers,
                        compID});
            return ((LeadResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLeadResultsForClimberAsync(int listID_Secretary, int[] climbers, long compID) {
            this.GetLeadResultsForClimberAsync(listID_Secretary, climbers, compID, null);
        }
        
        /// <remarks/>
        public void GetLeadResultsForClimberAsync(int listID_Secretary, int[] climbers, long compID, object userState) {
            if ((this.GetLeadResultsForClimberOperationCompleted == null)) {
                this.GetLeadResultsForClimberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLeadResultsForClimberOperationCompleted);
            }
            this.InvokeAsync("GetLeadResultsForClimber", new object[] {
                        listID_Secretary,
                        climbers,
                        compID}, this.GetLeadResultsForClimberOperationCompleted, userState);
        }
        
        private void OnGetLeadResultsForClimberOperationCompleted(object arg) {
            if ((this.GetLeadResultsForClimberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLeadResultsForClimberCompleted(this, new GetLeadResultsForClimberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetSpeedResultsForClimber", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SpeedResult[] GetSpeedResultsForClimber(int listID_Secretary, int[] climbers, long compID) {
            object[] results = this.Invoke("GetSpeedResultsForClimber", new object[] {
                        listID_Secretary,
                        climbers,
                        compID});
            return ((SpeedResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSpeedResultsForClimberAsync(int listID_Secretary, int[] climbers, long compID) {
            this.GetSpeedResultsForClimberAsync(listID_Secretary, climbers, compID, null);
        }
        
        /// <remarks/>
        public void GetSpeedResultsForClimberAsync(int listID_Secretary, int[] climbers, long compID, object userState) {
            if ((this.GetSpeedResultsForClimberOperationCompleted == null)) {
                this.GetSpeedResultsForClimberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpeedResultsForClimberOperationCompleted);
            }
            this.InvokeAsync("GetSpeedResultsForClimber", new object[] {
                        listID_Secretary,
                        climbers,
                        compID}, this.GetSpeedResultsForClimberOperationCompleted, userState);
        }
        
        private void OnGetSpeedResultsForClimberOperationCompleted(object arg) {
            if ((this.GetSpeedResultsForClimberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpeedResultsForClimberCompleted(this, new GetSpeedResultsForClimberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/GetBoulderResultsForClimber", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BoulderResult[] GetBoulderResultsForClimber(int listID_Secretary, int[] climbers, long compID) {
            object[] results = this.Invoke("GetBoulderResultsForClimber", new object[] {
                        listID_Secretary,
                        climbers,
                        compID});
            return ((BoulderResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBoulderResultsForClimberAsync(int listID_Secretary, int[] climbers, long compID) {
            this.GetBoulderResultsForClimberAsync(listID_Secretary, climbers, compID, null);
        }
        
        /// <remarks/>
        public void GetBoulderResultsForClimberAsync(int listID_Secretary, int[] climbers, long compID, object userState) {
            if ((this.GetBoulderResultsForClimberOperationCompleted == null)) {
                this.GetBoulderResultsForClimberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBoulderResultsForClimberOperationCompleted);
            }
            this.InvokeAsync("GetBoulderResultsForClimber", new object[] {
                        listID_Secretary,
                        climbers,
                        compID}, this.GetBoulderResultsForClimberOperationCompleted, userState);
        }
        
        private void OnGetBoulderResultsForClimberOperationCompleted(object arg) {
            if ((this.GetBoulderResultsForClimberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBoulderResultsForClimberCompleted(this, new GetBoulderResultsForClimberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/RemoveCompetitionParam", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveCompetitionParam(string paramName, long compID) {
            object[] results = this.Invoke("RemoveCompetitionParam", new object[] {
                        paramName,
                        compID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveCompetitionParamAsync(string paramName, long compID) {
            this.RemoveCompetitionParamAsync(paramName, compID, null);
        }
        
        /// <remarks/>
        public void RemoveCompetitionParamAsync(string paramName, long compID, object userState) {
            if ((this.RemoveCompetitionParamOperationCompleted == null)) {
                this.RemoveCompetitionParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCompetitionParamOperationCompleted);
            }
            this.InvokeAsync("RemoveCompetitionParam", new object[] {
                        paramName,
                        compID}, this.RemoveCompetitionParamOperationCompleted, userState);
        }
        
        private void OnRemoveCompetitionParamOperationCompleted(object arg) {
            if ((this.RemoveCompetitionParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCompetitionParamCompleted(this, new RemoveCompetitionParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostCompetitionParam", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long PostCompetitionParam(string paramName, string paramValue, long compID) {
            object[] results = this.Invoke("PostCompetitionParam", new object[] {
                        paramName,
                        paramValue,
                        compID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void PostCompetitionParamAsync(string paramName, string paramValue, long compID) {
            this.PostCompetitionParamAsync(paramName, paramValue, compID, null);
        }
        
        /// <remarks/>
        public void PostCompetitionParamAsync(string paramName, string paramValue, long compID, object userState) {
            if ((this.PostCompetitionParamOperationCompleted == null)) {
                this.PostCompetitionParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostCompetitionParamOperationCompleted);
            }
            this.InvokeAsync("PostCompetitionParam", new object[] {
                        paramName,
                        paramValue,
                        compID}, this.PostCompetitionParamOperationCompleted, userState);
        }
        
        private void OnPostCompetitionParamOperationCompleted(object arg) {
            if ((this.PostCompetitionParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostCompetitionParamCompleted(this, new PostCompetitionParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostCompetitionBinaryParam", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long PostCompetitionBinaryParam(string paramName, string paramValue, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] binaryValue, long compID) {
            object[] results = this.Invoke("PostCompetitionBinaryParam", new object[] {
                        paramName,
                        paramValue,
                        binaryValue,
                        compID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void PostCompetitionBinaryParamAsync(string paramName, string paramValue, byte[] binaryValue, long compID) {
            this.PostCompetitionBinaryParamAsync(paramName, paramValue, binaryValue, compID, null);
        }
        
        /// <remarks/>
        public void PostCompetitionBinaryParamAsync(string paramName, string paramValue, byte[] binaryValue, long compID, object userState) {
            if ((this.PostCompetitionBinaryParamOperationCompleted == null)) {
                this.PostCompetitionBinaryParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostCompetitionBinaryParamOperationCompleted);
            }
            this.InvokeAsync("PostCompetitionBinaryParam", new object[] {
                        paramName,
                        paramValue,
                        binaryValue,
                        compID}, this.PostCompetitionBinaryParamOperationCompleted, userState);
        }
        
        private void OnPostCompetitionBinaryParamOperationCompleted(object arg) {
            if ((this.PostCompetitionBinaryParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostCompetitionBinaryParamCompleted(this, new PostCompetitionBinaryParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostPhotoForClimber", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PostPhotoForClimber([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] photo, int climberID, long compID) {
            object[] results = this.Invoke("PostPhotoForClimber", new object[] {
                        photo,
                        climberID,
                        compID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PostPhotoForClimberAsync(byte[] photo, int climberID, long compID) {
            this.PostPhotoForClimberAsync(photo, climberID, compID, null);
        }
        
        /// <remarks/>
        public void PostPhotoForClimberAsync(byte[] photo, int climberID, long compID, object userState) {
            if ((this.PostPhotoForClimberOperationCompleted == null)) {
                this.PostPhotoForClimberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostPhotoForClimberOperationCompleted);
            }
            this.InvokeAsync("PostPhotoForClimber", new object[] {
                        photo,
                        climberID,
                        compID}, this.PostPhotoForClimberOperationCompleted, userState);
        }
        
        private void OnPostPhotoForClimberOperationCompleted(object arg) {
            if ((this.PostPhotoForClimberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostPhotoForClimberCompleted(this, new PostPhotoForClimberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostTeams", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] PostTeams(ONLTeamSerializable[] teams, bool fullRefresh, long compID) {
            object[] results = this.Invoke("PostTeams", new object[] {
                        teams,
                        fullRefresh,
                        compID});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void PostTeamsAsync(ONLTeamSerializable[] teams, bool fullRefresh, long compID) {
            this.PostTeamsAsync(teams, fullRefresh, compID, null);
        }
        
        /// <remarks/>
        public void PostTeamsAsync(ONLTeamSerializable[] teams, bool fullRefresh, long compID, object userState) {
            if ((this.PostTeamsOperationCompleted == null)) {
                this.PostTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostTeamsOperationCompleted);
            }
            this.InvokeAsync("PostTeams", new object[] {
                        teams,
                        fullRefresh,
                        compID}, this.PostTeamsOperationCompleted, userState);
        }
        
        private void OnPostTeamsOperationCompleted(object arg) {
            if ((this.PostTeamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostTeamsCompleted(this, new PostTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostTeam", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PostTeam(ONLTeamSerializable team) {
            object[] results = this.Invoke("PostTeam", new object[] {
                        team});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void PostTeamAsync(ONLTeamSerializable team) {
            this.PostTeamAsync(team, null);
        }
        
        /// <remarks/>
        public void PostTeamAsync(ONLTeamSerializable team, object userState) {
            if ((this.PostTeamOperationCompleted == null)) {
                this.PostTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostTeamOperationCompleted);
            }
            this.InvokeAsync("PostTeam", new object[] {
                        team}, this.PostTeamOperationCompleted, userState);
        }
        
        private void OnPostTeamOperationCompleted(object arg) {
            if ((this.PostTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostTeamCompleted(this, new PostTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostGroup", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PostGroup(ONLGroupSerializable grp) {
            object[] results = this.Invoke("PostGroup", new object[] {
                        grp});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void PostGroupAsync(ONLGroupSerializable grp) {
            this.PostGroupAsync(grp, null);
        }
        
        /// <remarks/>
        public void PostGroupAsync(ONLGroupSerializable grp, object userState) {
            if ((this.PostGroupOperationCompleted == null)) {
                this.PostGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostGroupOperationCompleted);
            }
            this.InvokeAsync("PostGroup", new object[] {
                        grp}, this.PostGroupOperationCompleted, userState);
        }
        
        private void OnPostGroupOperationCompleted(object arg) {
            if ((this.PostGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostGroupCompleted(this, new PostGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/PostClimber", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long PostClimber(ONLClimberLinkSerializable serClm) {
            object[] results = this.Invoke("PostClimber", new object[] {
                        serClm});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void PostClimberAsync(ONLClimberLinkSerializable serClm) {
            this.PostClimberAsync(serClm, null);
        }
        
        /// <remarks/>
        public void PostClimberAsync(ONLClimberLinkSerializable serClm, object userState) {
            if ((this.PostClimberOperationCompleted == null)) {
                this.PostClimberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostClimberOperationCompleted);
            }
            this.InvokeAsync("PostClimber", new object[] {
                        serClm}, this.PostClimberOperationCompleted, userState);
        }
        
        private void OnPostClimberOperationCompleted(object arg) {
            if ((this.PostClimberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostClimberCompleted(this, new PostClimberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/DeleteClimbersNotInIid", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteClimbersNotInIid(int[] iids, long compID) {
            object[] results = this.Invoke("DeleteClimbersNotInIid", new object[] {
                        iids,
                        compID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteClimbersNotInIidAsync(int[] iids, long compID) {
            this.DeleteClimbersNotInIidAsync(iids, compID, null);
        }
        
        /// <remarks/>
        public void DeleteClimbersNotInIidAsync(int[] iids, long compID, object userState) {
            if ((this.DeleteClimbersNotInIidOperationCompleted == null)) {
                this.DeleteClimbersNotInIidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteClimbersNotInIidOperationCompleted);
            }
            this.InvokeAsync("DeleteClimbersNotInIid", new object[] {
                        iids,
                        compID}, this.DeleteClimbersNotInIidOperationCompleted, userState);
        }
        
        private void OnDeleteClimbersNotInIidOperationCompleted(object arg) {
            if ((this.DeleteClimbersNotInIidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteClimbersNotInIidCompleted(this, new DeleteClimbersNotInIidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/DeleteClimbersBySecretaryID", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteClimbersBySecretaryID(int[] iids, long compID) {
            object[] results = this.Invoke("DeleteClimbersBySecretaryID", new object[] {
                        iids,
                        compID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteClimbersBySecretaryIDAsync(int[] iids, long compID) {
            this.DeleteClimbersBySecretaryIDAsync(iids, compID, null);
        }
        
        /// <remarks/>
        public void DeleteClimbersBySecretaryIDAsync(int[] iids, long compID, object userState) {
            if ((this.DeleteClimbersBySecretaryIDOperationCompleted == null)) {
                this.DeleteClimbersBySecretaryIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteClimbersBySecretaryIDOperationCompleted);
            }
            this.InvokeAsync("DeleteClimbersBySecretaryID", new object[] {
                        iids,
                        compID}, this.DeleteClimbersBySecretaryIDOperationCompleted, userState);
        }
        
        private void OnDeleteClimbersBySecretaryIDOperationCompleted(object arg) {
            if ((this.DeleteClimbersBySecretaryIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteClimbersBySecretaryIDCompleted(this, new DeleteClimbersBySecretaryIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/DeleteGroupsNotInIid", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteGroupsNotInIid(int[] iids, long compID) {
            object[] results = this.Invoke("DeleteGroupsNotInIid", new object[] {
                        iids,
                        compID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteGroupsNotInIidAsync(int[] iids, long compID) {
            this.DeleteGroupsNotInIidAsync(iids, compID, null);
        }
        
        /// <remarks/>
        public void DeleteGroupsNotInIidAsync(int[] iids, long compID, object userState) {
            if ((this.DeleteGroupsNotInIidOperationCompleted == null)) {
                this.DeleteGroupsNotInIidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteGroupsNotInIidOperationCompleted);
            }
            this.InvokeAsync("DeleteGroupsNotInIid", new object[] {
                        iids,
                        compID}, this.DeleteGroupsNotInIidOperationCompleted, userState);
        }
        
        private void OnDeleteGroupsNotInIidOperationCompleted(object arg) {
            if ((this.DeleteGroupsNotInIidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteGroupsNotInIidCompleted(this, new DeleteGroupsNotInIidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://climbing-competition.org/DeleteTeamsNotInSecretaryId", RequestNamespace="http://climbing-competition.org/", ResponseNamespace="http://climbing-competition.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteTeamsNotInSecretaryId(int[] iids, long compID) {
            object[] results = this.Invoke("DeleteTeamsNotInSecretaryId", new object[] {
                        iids,
                        compID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTeamsNotInSecretaryIdAsync(int[] iids, long compID) {
            this.DeleteTeamsNotInSecretaryIdAsync(iids, compID, null);
        }
        
        /// <remarks/>
        public void DeleteTeamsNotInSecretaryIdAsync(int[] iids, long compID, object userState) {
            if ((this.DeleteTeamsNotInSecretaryIdOperationCompleted == null)) {
                this.DeleteTeamsNotInSecretaryIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTeamsNotInSecretaryIdOperationCompleted);
            }
            this.InvokeAsync("DeleteTeamsNotInSecretaryId", new object[] {
                        iids,
                        compID}, this.DeleteTeamsNotInSecretaryIdOperationCompleted, userState);
        }
        
        private void OnDeleteTeamsNotInSecretaryIdOperationCompleted(object arg) {
            if ((this.DeleteTeamsNotInSecretaryIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTeamsNotInSecretaryIdCompleted(this, new DeleteTeamsNotInSecretaryIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class PairingValueOfStringString {
        
        private string value1Field;
        
        private string value2Field;
        
        /// <remarks/>
        public string Value1 {
            get {
                return this.value1Field;
            }
            set {
                this.value1Field = value;
            }
        }
        
        /// <remarks/>
        public string Value2 {
            get {
                return this.value2Field;
            }
            set {
                this.value2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class BoulderRouteResult {
        
        private int routeNumberField;
        
        private System.Nullable<int> topAttemptField;
        
        private System.Nullable<int> bonusAttemptField;
        
        /// <remarks/>
        public int RouteNumber {
            get {
                return this.routeNumberField;
            }
            set {
                this.routeNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TopAttempt {
            get {
                return this.topAttemptField;
            }
            set {
                this.topAttemptField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> BonusAttempt {
            get {
                return this.bonusAttemptField;
            }
            set {
                this.bonusAttemptField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BoulderResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpeedResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LeadResult))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class ClimbersResult {
        
        private int listID_SecretaryField;
        
        private int climberID_SecretaryField;
        
        private System.Nullable<int> startField;
        
        private System.Nullable<long> resField;
        
        private bool preQfField;
        
        private System.Nullable<int> posField;
        
        /// <remarks/>
        public int ListID_Secretary {
            get {
                return this.listID_SecretaryField;
            }
            set {
                this.listID_SecretaryField = value;
            }
        }
        
        /// <remarks/>
        public int ClimberID_Secretary {
            get {
                return this.climberID_SecretaryField;
            }
            set {
                this.climberID_SecretaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Start {
            get {
                return this.startField;
            }
            set {
                this.startField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> Res {
            get {
                return this.resField;
            }
            set {
                this.resField = value;
            }
        }
        
        /// <remarks/>
        public bool PreQf {
            get {
                return this.preQfField;
            }
            set {
                this.preQfField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Pos {
            get {
                return this.posField;
            }
            set {
                this.posField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class BoulderResult : ClimbersResult {
        
        private System.Nullable<int> topsField;
        
        private System.Nullable<int> topAttemptsField;
        
        private System.Nullable<int> bonusesField;
        
        private System.Nullable<int> bonusAttemptsField;
        
        private bool dNSField;
        
        private bool dSQField;
        
        private BoulderRouteResult[] routeDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Tops {
            get {
                return this.topsField;
            }
            set {
                this.topsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TopAttempts {
            get {
                return this.topAttemptsField;
            }
            set {
                this.topAttemptsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Bonuses {
            get {
                return this.bonusesField;
            }
            set {
                this.bonusesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> BonusAttempts {
            get {
                return this.bonusAttemptsField;
            }
            set {
                this.bonusAttemptsField = value;
            }
        }
        
        /// <remarks/>
        public bool DNS {
            get {
                return this.dNSField;
            }
            set {
                this.dNSField = value;
            }
        }
        
        /// <remarks/>
        public bool DSQ {
            get {
                return this.dSQField;
            }
            set {
                this.dSQField = value;
            }
        }
        
        /// <remarks/>
        public BoulderRouteResult[] RouteData {
            get {
                return this.routeDataField;
            }
            set {
                this.routeDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class SpeedResult : ClimbersResult {
        
        private string route1Field;
        
        private string route2Field;
        
        private string textResField;
        
        private string qfField;
        
        /// <remarks/>
        public string Route1 {
            get {
                return this.route1Field;
            }
            set {
                this.route1Field = value;
            }
        }
        
        /// <remarks/>
        public string Route2 {
            get {
                return this.route2Field;
            }
            set {
                this.route2Field = value;
            }
        }
        
        /// <remarks/>
        public string TextRes {
            get {
                return this.textResField;
            }
            set {
                this.textResField = value;
            }
        }
        
        /// <remarks/>
        public string Qf {
            get {
                return this.qfField;
            }
            set {
                this.qfField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class LeadResult : ClimbersResult {
        
        private string textResField;
        
        /// <remarks/>
        public string TextRes {
            get {
                return this.textResField;
            }
            set {
                this.textResField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class ListHeader {
        
        private int secretaryIDField;
        
        private string roundField;
        
        private string styleField;
        
        private System.Nullable<int> secretaryID_ParentField;
        
        private string listTypeField;
        
        private System.Nullable<int> groupIDField;
        
        private System.Nullable<int> routeNumberField;
        
        private bool liveField;
        
        private int quoteField;
        
        private System.Nullable<int> prevRound_SecretaryIDField;
        
        private string startTimeField;
        
        private bool roundFinishedField;
        
        private System.Nullable<System.DateTime> lastUpdateField;
        
        /// <remarks/>
        public int SecretaryID {
            get {
                return this.secretaryIDField;
            }
            set {
                this.secretaryIDField = value;
            }
        }
        
        /// <remarks/>
        public string Round {
            get {
                return this.roundField;
            }
            set {
                this.roundField = value;
            }
        }
        
        /// <remarks/>
        public string Style {
            get {
                return this.styleField;
            }
            set {
                this.styleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> SecretaryID_Parent {
            get {
                return this.secretaryID_ParentField;
            }
            set {
                this.secretaryID_ParentField = value;
            }
        }
        
        /// <remarks/>
        public string ListType {
            get {
                return this.listTypeField;
            }
            set {
                this.listTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> GroupID {
            get {
                return this.groupIDField;
            }
            set {
                this.groupIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> RouteNumber {
            get {
                return this.routeNumberField;
            }
            set {
                this.routeNumberField = value;
            }
        }
        
        /// <remarks/>
        public bool Live {
            get {
                return this.liveField;
            }
            set {
                this.liveField = value;
            }
        }
        
        /// <remarks/>
        public int Quote {
            get {
                return this.quoteField;
            }
            set {
                this.quoteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> PrevRound_SecretaryID {
            get {
                return this.prevRound_SecretaryIDField;
            }
            set {
                this.prevRound_SecretaryIDField = value;
            }
        }
        
        /// <remarks/>
        public string StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool RoundFinished {
            get {
                return this.roundFinishedField;
            }
            set {
                this.roundFinishedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> LastUpdate {
            get {
                return this.lastUpdateField;
            }
            set {
                this.lastUpdateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class ONLClimberLinkSerializable {
        
        private bool containsPhotoField;
        
        private ONLClimberCompLink linkField;
        
        private ONLclimber climberField;
        
        private ONLGroupSerializable groupField;
        
        private ONLTeamSerializable teamField;
        
        /// <remarks/>
        public bool ContainsPhoto {
            get {
                return this.containsPhotoField;
            }
            set {
                this.containsPhotoField = value;
            }
        }
        
        /// <remarks/>
        public ONLClimberCompLink Link {
            get {
                return this.linkField;
            }
            set {
                this.linkField = value;
            }
        }
        
        /// <remarks/>
        public ONLclimber Climber {
            get {
                return this.climberField;
            }
            set {
                this.climberField = value;
            }
        }
        
        /// <remarks/>
        public ONLGroupSerializable Group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
        /// <remarks/>
        public ONLTeamSerializable Team {
            get {
                return this.teamField;
            }
            set {
                this.teamField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class ONLClimberCompLink : EntityObject {
        
        private long iidField;
        
        private int climber_idField;
        
        private long comp_idField;
        
        private int secretary_idField;
        
        private int group_idField;
        
        private int team_idField;
        
        private string qfField;
        
        private short leadField;
        
        private short speedField;
        
        private short boulderField;
        
        private System.Nullable<int> rankingLeadField;
        
        private System.Nullable<int> rankingSpeedField;
        
        private System.Nullable<int> rankingBoulderField;
        
        private bool vkField;
        
        private bool nopointsField;
        
        private string appl_typeField;
        
        private bool is_changebleField;
        
        private int queue_posField;
        
        private System.DateTime sys_date_createField;
        
        private System.DateTime sys_date_updateField;
        
        private string stateField;
        
        private System.Nullable<long> updOpIidField;
        
        private System.Nullable<long> replacementIDField;
        
        private int queue_LeadField;
        
        private int queue_SpeedField;
        
        private int queue_BoulderField;
        
        private EntityReferenceOfONLClimberCompLink oNLClimberCompLink2ReferenceField;
        
        private EntityReferenceOfONLclimber oNLclimberReferenceField;
        
        private EntityReferenceOfONLCompetition oNLCompetitionReferenceField;
        
        private EntityReferenceOfONLGroup oNLGroupReferenceField;
        
        private EntityReferenceOfONLoperation oNLoperationReferenceField;
        
        private EntityReferenceOfONLteam oNLteamReferenceField;
        
        /// <remarks/>
        public long iid {
            get {
                return this.iidField;
            }
            set {
                this.iidField = value;
            }
        }
        
        /// <remarks/>
        public int climber_id {
            get {
                return this.climber_idField;
            }
            set {
                this.climber_idField = value;
            }
        }
        
        /// <remarks/>
        public long comp_id {
            get {
                return this.comp_idField;
            }
            set {
                this.comp_idField = value;
            }
        }
        
        /// <remarks/>
        public int secretary_id {
            get {
                return this.secretary_idField;
            }
            set {
                this.secretary_idField = value;
            }
        }
        
        /// <remarks/>
        public int group_id {
            get {
                return this.group_idField;
            }
            set {
                this.group_idField = value;
            }
        }
        
        /// <remarks/>
        public int team_id {
            get {
                return this.team_idField;
            }
            set {
                this.team_idField = value;
            }
        }
        
        /// <remarks/>
        public string qf {
            get {
                return this.qfField;
            }
            set {
                this.qfField = value;
            }
        }
        
        /// <remarks/>
        public short lead {
            get {
                return this.leadField;
            }
            set {
                this.leadField = value;
            }
        }
        
        /// <remarks/>
        public short speed {
            get {
                return this.speedField;
            }
            set {
                this.speedField = value;
            }
        }
        
        /// <remarks/>
        public short boulder {
            get {
                return this.boulderField;
            }
            set {
                this.boulderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> rankingLead {
            get {
                return this.rankingLeadField;
            }
            set {
                this.rankingLeadField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> rankingSpeed {
            get {
                return this.rankingSpeedField;
            }
            set {
                this.rankingSpeedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> rankingBoulder {
            get {
                return this.rankingBoulderField;
            }
            set {
                this.rankingBoulderField = value;
            }
        }
        
        /// <remarks/>
        public bool vk {
            get {
                return this.vkField;
            }
            set {
                this.vkField = value;
            }
        }
        
        /// <remarks/>
        public bool nopoints {
            get {
                return this.nopointsField;
            }
            set {
                this.nopointsField = value;
            }
        }
        
        /// <remarks/>
        public string appl_type {
            get {
                return this.appl_typeField;
            }
            set {
                this.appl_typeField = value;
            }
        }
        
        /// <remarks/>
        public bool is_changeble {
            get {
                return this.is_changebleField;
            }
            set {
                this.is_changebleField = value;
            }
        }
        
        /// <remarks/>
        public int queue_pos {
            get {
                return this.queue_posField;
            }
            set {
                this.queue_posField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime sys_date_create {
            get {
                return this.sys_date_createField;
            }
            set {
                this.sys_date_createField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime sys_date_update {
            get {
                return this.sys_date_updateField;
            }
            set {
                this.sys_date_updateField = value;
            }
        }
        
        /// <remarks/>
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> updOpIid {
            get {
                return this.updOpIidField;
            }
            set {
                this.updOpIidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> replacementID {
            get {
                return this.replacementIDField;
            }
            set {
                this.replacementIDField = value;
            }
        }
        
        /// <remarks/>
        public int queue_Lead {
            get {
                return this.queue_LeadField;
            }
            set {
                this.queue_LeadField = value;
            }
        }
        
        /// <remarks/>
        public int queue_Speed {
            get {
                return this.queue_SpeedField;
            }
            set {
                this.queue_SpeedField = value;
            }
        }
        
        /// <remarks/>
        public int queue_Boulder {
            get {
                return this.queue_BoulderField;
            }
            set {
                this.queue_BoulderField = value;
            }
        }
        
        /// <remarks/>
        public EntityReferenceOfONLClimberCompLink ONLClimberCompLink2Reference {
            get {
                return this.oNLClimberCompLink2ReferenceField;
            }
            set {
                this.oNLClimberCompLink2ReferenceField = value;
            }
        }
        
        /// <remarks/>
        public EntityReferenceOfONLclimber ONLclimberReference {
            get {
                return this.oNLclimberReferenceField;
            }
            set {
                this.oNLclimberReferenceField = value;
            }
        }
        
        /// <remarks/>
        public EntityReferenceOfONLCompetition ONLCompetitionReference {
            get {
                return this.oNLCompetitionReferenceField;
            }
            set {
                this.oNLCompetitionReferenceField = value;
            }
        }
        
        /// <remarks/>
        public EntityReferenceOfONLGroup ONLGroupReference {
            get {
                return this.oNLGroupReferenceField;
            }
            set {
                this.oNLGroupReferenceField = value;
            }
        }
        
        /// <remarks/>
        public EntityReferenceOfONLoperation ONLoperationReference {
            get {
                return this.oNLoperationReferenceField;
            }
            set {
                this.oNLoperationReferenceField = value;
            }
        }
        
        /// <remarks/>
        public EntityReferenceOfONLteam ONLteamReference {
            get {
                return this.oNLteamReferenceField;
            }
            set {
                this.oNLteamReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class EntityReferenceOfONLClimberCompLink : EntityReference {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLteam))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLoperation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLCompetition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLclimber))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLClimberCompLink))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLTeamGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public abstract partial class EntityReference : RelatedEnd {
        
        private EntityKey entityKeyField;
        
        /// <remarks/>
        public EntityKey EntityKey {
            get {
                return this.entityKeyField;
            }
            set {
                this.entityKeyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class EntityKey {
        
        private string entitySetNameField;
        
        private string entityContainerNameField;
        
        private EntityKeyMember[] entityKeyValuesField;
        
        /// <remarks/>
        public string EntitySetName {
            get {
                return this.entitySetNameField;
            }
            set {
                this.entitySetNameField = value;
            }
        }
        
        /// <remarks/>
        public string EntityContainerName {
            get {
                return this.entityContainerNameField;
            }
            set {
                this.entityContainerNameField = value;
            }
        }
        
        /// <remarks/>
        public EntityKeyMember[] EntityKeyValues {
            get {
                return this.entityKeyValuesField;
            }
            set {
                this.entityKeyValuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class EntityKeyMember {
        
        private string keyField;
        
        private object valueField;
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLteam))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLoperation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLCompetition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLclimber))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLClimberCompLink))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityReferenceOfONLTeamGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public abstract partial class RelatedEnd {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class EntityReferenceOfONLteam : EntityReference {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class EntityReferenceOfONLoperation : EntityReference {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class EntityReferenceOfONLGroup : EntityReference {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class EntityReferenceOfONLCompetition : EntityReference {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class EntityReferenceOfONLclimber : EntityReference {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class EntityReferenceOfONLTeamGroup : EntityReference {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ONLCompetition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ONLclimber))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ONLClimberCompLink))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public abstract partial class EntityObject : StructuralObject {
        
        private EntityKey entityKeyField;
        
        /// <remarks/>
        public EntityKey EntityKey {
            get {
                return this.entityKeyField;
            }
            set {
                this.entityKeyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntityObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ONLCompetition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ONLclimber))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ONLClimberCompLink))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public abstract partial class StructuralObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class ONLCompetition : EntityObject {
        
        private long iidField;
        
        private string nameField;
        
        private string short_nameField;
        
        private string placeField;
        
        private string dateField;
        
        private System.Nullable<int> default_groupField;
        
        private EntityReferenceOfONLTeamGroup oNLTeamGroupReferenceField;
        
        /// <remarks/>
        public long iid {
            get {
                return this.iidField;
            }
            set {
                this.iidField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string short_name {
            get {
                return this.short_nameField;
            }
            set {
                this.short_nameField = value;
            }
        }
        
        /// <remarks/>
        public string place {
            get {
                return this.placeField;
            }
            set {
                this.placeField = value;
            }
        }
        
        /// <remarks/>
        public string date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> default_group {
            get {
                return this.default_groupField;
            }
            set {
                this.default_groupField = value;
            }
        }
        
        /// <remarks/>
        public EntityReferenceOfONLTeamGroup ONLTeamGroupReference {
            get {
                return this.oNLTeamGroupReferenceField;
            }
            set {
                this.oNLTeamGroupReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class ONLclimber : EntityObject {
        
        private int iidField;
        
        private string surnameField;
        
        private string nameField;
        
        private bool genderFemaleField;
        
        private System.DateTime birthdateField;
        
        private byte[] photoField;
        
        private bool phLoadedField;
        
        private bool is_delField;
        
        private System.Nullable<int> ageField;
        
        /// <remarks/>
        public int iid {
            get {
                return this.iidField;
            }
            set {
                this.iidField = value;
            }
        }
        
        /// <remarks/>
        public string surname {
            get {
                return this.surnameField;
            }
            set {
                this.surnameField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool genderFemale {
            get {
                return this.genderFemaleField;
            }
            set {
                this.genderFemaleField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime birthdate {
            get {
                return this.birthdateField;
            }
            set {
                this.birthdateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] photo {
            get {
                return this.photoField;
            }
            set {
                this.photoField = value;
            }
        }
        
        /// <remarks/>
        public bool phLoaded {
            get {
                return this.phLoadedField;
            }
            set {
                this.phLoadedField = value;
            }
        }
        
        /// <remarks/>
        public bool is_del {
            get {
                return this.is_delField;
            }
            set {
                this.is_delField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> age {
            get {
                return this.ageField;
            }
            set {
                this.ageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class ONLGroupSerializable {
        
        private int iidField;
        
        private long compIDField;
        
        private string nameField;
        
        private int minQfField;
        
        private int yearOldField;
        
        private int yearYoungField;
        
        private bool genderFemaleField;
        
        /// <remarks/>
        public int Iid {
            get {
                return this.iidField;
            }
            set {
                this.iidField = value;
            }
        }
        
        /// <remarks/>
        public long CompID {
            get {
                return this.compIDField;
            }
            set {
                this.compIDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int minQf {
            get {
                return this.minQfField;
            }
            set {
                this.minQfField = value;
            }
        }
        
        /// <remarks/>
        public int yearOld {
            get {
                return this.yearOldField;
            }
            set {
                this.yearOldField = value;
            }
        }
        
        /// <remarks/>
        public int yearYoung {
            get {
                return this.yearYoungField;
            }
            set {
                this.yearYoungField = value;
            }
        }
        
        /// <remarks/>
        public bool GenderFemale {
            get {
                return this.genderFemaleField;
            }
            set {
                this.genderFemaleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class ONLTeamSerializable {
        
        private int iidField;
        
        private long compIDField;
        
        private int secretaryIdField;
        
        private string nameField;
        
        private int rankingPosField;
        
        private string groupNameField;
        
        private System.Nullable<int> groupIDField;
        
        private bool groupSetField;
        
        /// <remarks/>
        public int Iid {
            get {
                return this.iidField;
            }
            set {
                this.iidField = value;
            }
        }
        
        /// <remarks/>
        public long CompID {
            get {
                return this.compIDField;
            }
            set {
                this.compIDField = value;
            }
        }
        
        /// <remarks/>
        public int SecretaryId {
            get {
                return this.secretaryIdField;
            }
            set {
                this.secretaryIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int RankingPos {
            get {
                return this.rankingPosField;
            }
            set {
                this.rankingPosField = value;
            }
        }
        
        /// <remarks/>
        public string GroupName {
            get {
                return this.groupNameField;
            }
            set {
                this.groupNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> GroupID {
            get {
                return this.groupIDField;
            }
            set {
                this.groupIDField = value;
            }
        }
        
        /// <remarks/>
        public bool GroupSet {
            get {
                return this.groupSetField;
            }
            set {
                this.groupSetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class ONLCompetitionParamSerializable {
        
        private string nameField;
        
        private string valueField;
        
        private byte[] binaryValueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] BinaryValue {
            get {
                return this.binaryValueField;
            }
            set {
                this.binaryValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1038.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://climbing-competition.org/")]
    public partial class ONLCompetitionSerializable {
        
        private ONLCompetitionParamSerializable[] paramsField;
        
        private ONLCompetition competitionField;
        
        /// <remarks/>
        public ONLCompetitionParamSerializable[] Params {
            get {
                return this.paramsField;
            }
            set {
                this.paramsField = value;
            }
        }
        
        /// <remarks/>
        public ONLCompetition Competition {
            get {
                return this.competitionField;
            }
            set {
                this.competitionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ValidateAdminPasswordCompletedEventHandler(object sender, ValidateAdminPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateAdminPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateAdminPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetParamValueCompletedEventHandler(object sender, GetParamValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParamValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParamValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetAllBinaryParamsStringParamValuesCompletedEventHandler(object sender, GetAllBinaryParamsStringParamValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllBinaryParamsStringParamValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllBinaryParamsStringParamValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PairingValueOfStringString[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PairingValueOfStringString[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetBinaryParamValueCompletedEventHandler(object sender, GetBinaryParamValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBinaryParamValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBinaryParamValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetAllCompetitionsCompletedEventHandler(object sender, GetAllCompetitionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCompetitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCompetitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ONLCompetitionSerializable[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ONLCompetitionSerializable[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetTeamsForCompetitionCompletedEventHandler(object sender, GetTeamsForCompetitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamsForCompetitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamsForCompetitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ONLTeamSerializable[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ONLTeamSerializable[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetGroupsForCompetitionCompletedEventHandler(object sender, GetGroupsForCompetitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupsForCompetitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupsForCompetitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ONLGroupSerializable[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ONLGroupSerializable[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetClimberCompletedEventHandler(object sender, GetClimberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClimberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClimberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ONLClimberLinkSerializable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ONLClimberLinkSerializable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetClimbersForCompetitionCompletedEventHandler(object sender, GetClimbersForCompetitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClimbersForCompetitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClimbersForCompetitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ONLClimberLinkSerializable[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ONLClimberLinkSerializable[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetListCompletedEventHandler(object sender, GetListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ListHeader Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ListHeader)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetListsCompletedEventHandler(object sender, GetListsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ListHeader[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ListHeader[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostListCompletedEventHandler(object sender, PostListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostListsCompletedEventHandler(object sender, PostListsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteListsWhereSecretaryIDInCompletedEventHandler(object sender, DeleteListsWhereSecretaryIDInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteListsWhereSecretaryIDInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteListsWhereSecretaryIDInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteListsNotInSecretaryIDCompletedEventHandler(object sender, DeleteListsNotInSecretaryIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteListsNotInSecretaryIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteListsNotInSecretaryIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostLeadResultCompletedEventHandler(object sender, PostLeadResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostLeadResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostLeadResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long listDataID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostSpeedResultCompletedEventHandler(object sender, PostSpeedResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostSpeedResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostSpeedResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long listDataID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostBoulderResultCompletedEventHandler(object sender, PostBoulderResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostBoulderResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostBoulderResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long listDataID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostBoulderResultListCompletedEventHandler(object sender, PostBoulderResultListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostBoulderResultListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostBoulderResultListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int errCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostSpeedResultListCompletedEventHandler(object sender, PostSpeedResultListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostSpeedResultListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostSpeedResultListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int errCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostLeadResultListCompletedEventHandler(object sender, PostLeadResultListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostLeadResultListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostLeadResultListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int errCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetLeadResultsForClimberCompletedEventHandler(object sender, GetLeadResultsForClimberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLeadResultsForClimberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLeadResultsForClimberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LeadResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LeadResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetSpeedResultsForClimberCompletedEventHandler(object sender, GetSpeedResultsForClimberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpeedResultsForClimberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpeedResultsForClimberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SpeedResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SpeedResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetBoulderResultsForClimberCompletedEventHandler(object sender, GetBoulderResultsForClimberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBoulderResultsForClimberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBoulderResultsForClimberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BoulderResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BoulderResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void RemoveCompetitionParamCompletedEventHandler(object sender, RemoveCompetitionParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveCompetitionParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveCompetitionParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostCompetitionParamCompletedEventHandler(object sender, PostCompetitionParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostCompetitionParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostCompetitionParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostCompetitionBinaryParamCompletedEventHandler(object sender, PostCompetitionBinaryParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostCompetitionBinaryParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostCompetitionBinaryParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostPhotoForClimberCompletedEventHandler(object sender, PostPhotoForClimberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostPhotoForClimberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostPhotoForClimberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostTeamsCompletedEventHandler(object sender, PostTeamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostTeamCompletedEventHandler(object sender, PostTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostGroupCompletedEventHandler(object sender, PostGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void PostClimberCompletedEventHandler(object sender, PostClimberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostClimberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostClimberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteClimbersNotInIidCompletedEventHandler(object sender, DeleteClimbersNotInIidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteClimbersNotInIidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteClimbersNotInIidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteClimbersBySecretaryIDCompletedEventHandler(object sender, DeleteClimbersBySecretaryIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteClimbersBySecretaryIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteClimbersBySecretaryIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteGroupsNotInIidCompletedEventHandler(object sender, DeleteGroupsNotInIidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteGroupsNotInIidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteGroupsNotInIidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteTeamsNotInSecretaryIdCompletedEventHandler(object sender, DeleteTeamsNotInSecretaryIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTeamsNotInSecretaryIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTeamsNotInSecretaryIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591